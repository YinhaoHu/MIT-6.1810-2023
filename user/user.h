/// The comments were generated by ChatGPT.

#define NULL ((void*)0)

struct stat;
struct sysinfo;

// ========================================================================
//                          System    Call
// ========================================================================

int
fork(void);
int
exit(int) __attribute__((noreturn));
int
wait(int*);

/// @brief Create a pipe.
/// @param fds An array of two file descriptors (read_fd, write_fd).
/// @return 0 on success, -1 on error.
int
pipe(int* fds);

/// @brief Write data to a file.
/// @param fd The file descriptor.
/// @param buf A pointer to the data buffer.
/// @param n The number of bytes to write.
/// @return The number of bytes written, or -1 on error.
int
write(int fd, const void* buf, int n);

/// @brief Read data from a file.
/// @param fd The file descriptor.
/// @param buf A pointer to the buffer where the read data will be stored.
/// @param n The number of bytes to read.
/// @return The number of bytes read, or -1 on error.
int
read(int fd, void* buf, int n);

/// @brief Close a file descriptor.
/// @param fd The file descriptor to close.
/// @return 0 on success, -1 on error.
int
close(int fd);

/// @brief Kill a process.
/// @param pid The process ID of the process to kill.
/// @return 0 on success, -1 on error.
int
kill(int pid);

/// @brief Execute a new program.
/// @param path The path to the program to execute.
/// @param argv An array of argument strings.
/// @return -1 on failure, does not return on success.
/// @note The argv should end with a null pointer.
int
exec(const char* path, char** argv);

/// @brief Open a file.
/// @param path The path to the file.
/// @param mode The mode in which to open the file.
/// @return The file descriptor, or -1 on error.
int
open(const char* path, int mode);

/// @brief Create a special or ordinary file.
/// @param path The path to the file.
/// @param major Major device number.
/// @param minor Minor device number.
/// @return 0 on success, -1 on error.
int
mknod(const char* path, short major, short minor);

/// @brief Delete a file.
/// @param path The path to the file.
/// @return 0 on success, -1 on error.
int
unlink(const char* path);

/// @brief Get file status.
/// @param fd The file descriptor.
/// @param st A pointer to the stat structure.
/// @return 0 on success, -1 on error.
int
fstat(int fd, struct stat* st);

/// @brief Create a link to a file.
/// @param old The old path.
/// @param new The new path.
/// @return 0 on success, -1 on error.
int
link(const char* old, const char* new);

/// @brief Create a directory.
/// @param path The path to the directory.
/// @return 0 on success, -1 on error.
int
mkdir(const char* path);

/// @brief Change the current directory.
/// @param path The path to the new directory.
/// @return 0 on success, -1 on error.
int
chdir(const char* path);

/// @brief Duplicate a file descriptor.
/// @param fd The file descriptor to duplicate.
/// @return The new file descriptor, or -1 on error.
int
dup(int fd);

/// @brief Get the process ID.
/// @return The process ID.
int
getpid(void);

/// @brief Increase the program's data space.
/// @param increment The number of bytes to increase.
/// @return The previous end of the data segment.
char*
sbrk(int increment);

/// @brief Sleep for a number of ticks.
/// @param ticks The number of ticks to sleep.
/// @return 0 on success, -1 on error.
int
sleep(int ticks);

/// @brief Get the system uptime.
/// @return The number of ticks since boot.
int
uptime(void);

int trace(int mask);

int sysinfo(struct sysinfo *info);

// ========================================================================
//                              ulib.c
// ========================================================================

/// @brief Get file status.
/// @param path The path to the file.
/// @param st A pointer to the stat structure.
/// @return 0 on success, -1 on error.
int
stat(const char* path, struct stat* st);

/// @brief Copy a string.
/// @param dest The destination buffer.
/// @param src The source string.
/// @return A pointer to the destination buffer.
char*
strcpy(char* dest, const char* src);

/// @brief Move a block of memory.
/// @param dest The destination buffer.
/// @param src The source buffer.
/// @param n The number of bytes to move.
/// @return A pointer to the destination buffer.
void*
memmove(void* dest, const void* src, int n);

/// @brief Find the first occurrence of a character in a string.
/// @param str The string to search.
/// @param c The character to find.
/// @return A pointer to the character in the string, or NULL if not found.
char*
strchr(const char* str, char c);

/// @brief Compare two strings.
/// @param s1 The first string.
/// @param s2 The second string.
/// @return An integer less than, equal to, or greater than zero if s1 is found, respectively, to be less than, to match, or be greater than s2.
int
strcmp(const char* s1, const char* s2);

/// @brief Print formatted output to a file descriptor.
/// @param fd The file descriptor.
/// @param fmt The format string.
/// @param ... The values to format.
void
fprintf(int fd, const char* fmt, ...);

/// @brief Print formatted output to the console.
/// @param fmt The format string.
/// @param ... The values to format.
void
printf(const char* fmt, ...);

/// @brief Get a string from the input.
/// @param buf The buffer to store the string.
/// @param max The maximum number of characters to read.
/// @return A pointer to the buffer.
char*
gets(char* buf, int max);

/// @brief Get the length of a string.
/// @param str The string.
/// @return The length of the string.
uint
strlen(const char* str);

/// @brief Fill a block of memory with a value.
/// @param s The buffer to fill.
/// @param c The value to set.
/// @param n The number of bytes to set.
/// @return A pointer to the buffer.
void*
memset(void* s, int c, uint n);

/// @brief Allocate memory.
/// @param size The number of bytes to allocate.
/// @return A pointer to the allocated memory.
void*
malloc(uint size);

/// @brief Free allocated memory.
/// @param ptr The pointer to the memory to free.
void
free(void* ptr);

/// @brief Convert a string to an integer.
/// @param str The string to convert.
/// @return The integer value.
int
atoi(const char* str);

/// @brief Compare two blocks of memory.
/// @param s1 The first block.
/// @param s2 The second block.
/// @param n The number of bytes to compare.
/// @return An integer less than, equal to, or greater than zero if s1 is found, respectively, to be less than, to match, or be greater than s2.
int
memcmp(const void* s1, const void* s2, uint n);

/// @brief Copy a block of memory.
/// @param dest The destination buffer.
/// @param src The source buffer.
/// @param n The number of bytes to copy.
/// @return A pointer to the destination buffer.
void*
memcpy(void* dest, const void* src, uint n);
